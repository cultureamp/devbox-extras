#!/usr/bin/env bash
set -e

pipx install poetry

poetry_repos="$(poetry config repositories)"

if [[ "$poetry_repos" != "{}" && "${POETRY_CA_PRIVATE_PYTHON:-true}" == "true" ]] ; then
  # if there are extra poetry repos and we haven't opted out of private package handling
  # then assume we have private python packages and are using poetry-codeartifact-auth
  echo "Setting up helpers for installing private python packages and checking config"
  auth_method="${POETRY_CA_AUTH_METHOD:-sso}"
  if [[ "${auth_method}" == "sso" || "${auth_method}" == "vault" ]] ; then
    if [[ -z "$POETRY_CA_DEFAULT_AWS_PROFILE" ]] ; then
      cat >&2 <<'EOF'
#############################################################################
NOTE: `POETRY_CA_DEFAULT_AWS_PROFILE` environment variable is unset
Set a value for this in your profile, or if not needed, then opt out of private
package handling by either removing extra private package repositories from
pyproject.toml or set `POETRY_CA_PRIVATE_PYTHON` to `"false"` in
`devbox.json`
#############################################################################
EOF
      exit 1
    fi
  fi

  if [[ "${auth_method}" == "environment" ]] ; then
    if [[ -z "$AWS_ACCESS_KEY_ID" ]] ; then
      echo "AWS environment credentials not found"
    fi
  fi
  poetry self add git+https://github.com/cultureamp/poetry-codeartifact-auth.git#main -E plugin
else
  echo "You do not appear to want handling of private Python packages so it will not be set up"
fi

. ${VENV_DIR}/bin/activate
## running twice seems to get around auth issues on headless systems
poetry -v install || poetry -v install || exit 1
echo "Devbox setup has completed poetry install"
pre-commit install --install-hooks || echo "WARNING: could not install pre-commit hooks" >&2

# hook env vars up to cert files for agreeable netskope x python packages
if [ -d "$HOME" ]; then
  curl -o $HOME/Downloads/netskope_bundle.pem https://raw.githubusercontent.com/cultureamp/devbox-extras/main/plugins/ca-python-standard/bin/netskope_bundle.pem
  export CERT="$HOME/Downloads/netskope_bundle.pem"
  export SSL_CERT_FILE=$CERT
  # # this one will fix most of the python cli
  export REQUESTS_CA_BUNDLE=$CERT
  # # this one is for python sdk for vertex
  # #!! but it may still throw a missing selected ALPN property error - for python version > 3.9
  export GRPC_DEFAULT_SSL_ROOTS_FILE_PATH=$CERT
  echo "netskope x python package certificate bundle sorted out"
else
  echo "netskope x python package certificate bundle skipped (no home dir found as expected when not running on local mac)"
fi
  