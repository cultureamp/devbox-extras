#! /bin/sh

set -e

hotel_bin_path="${XDG_DATA_DIR:-$HOME/.local/share}/hotel/bin/hotel"
hotel_tarball_name="hotel_$(uname)_$(uname -m).tar.gz"

validate_system_compatible() {
  # currently we only support macOS because we only have secret storage for macOS setup
  # we will support linux "soon" for use in VMs and easier testing
  if [ "$(uname)" != "Darwin" ]; then
    echo "this script currently only supports macOS, linux support is planned"
    exit 1
  fi
}

verify_github_token() {
  scopes=$(curl -sLI -u "_:$1" "https://api.github.com/user" |
    grep '^x-oauth-scopes: ' |
    sed 's/^x-oauth-scopes: //')
  if [ "$scopes" = "" ]; then
    echo "token not valid"
    exit 1
  fi
  if ! echo "$scopes" | grep "repo" >/dev/null 2>&1; then
    echo "token does not have the 'repo' scope"
    exit 1
  fi
}

get_and_store_github_key() {
  echo "we need a github key to download hotel, and for hotel to use to pull git repos, it will be stored in the system keychain"
  echo "you can get this from:"
  echo "    https://github.com/settings/tokens/new?scopes=repo "
  echo

  service_name="com.cultureamp.hotel"
  account_name="github"

  stty -echo
  printf "Github token: "
  read -r PASSWORD
  stty echo

  verify_github_token "$PASSWORD"
  echo "=> provided token okay"

  # todo: check existing token is okay first

  # remove if exists so we can write
  if security find-generic-password -s "$service_name" -a "$account_name" >/dev/null 2>&1; then
    security delete-generic-password -s "$service_name" -a "$account_name" >/dev/null 2>&1
  fi
  security add-generic-password -s "$service_name" -a "$account_name" -w "$PASSWORD"
}

install_launcher() {
  # TODO it would be better if this was generated by hotel rather than pulled from a url
  TMPDIR=$(mktemp -d)
  # FIXME point to main branch before merging
  launcher_url="https://raw.githubusercontent.com/cultureamp/devbox-extras/new-bootstrap/scripts/launcher.sh"
  curl "$launcher_url" >"$TMPDIR/hotel"
  chmod +x "$TMPDIR/hotel"
  echo "==installing hotel, this will require a sudo password=="
  sudo mv "$TMPDIR/hotel" "/usr/local/bin/"
}

download_latest_hotel() {
  # we can't get the specific release we want without a json parsing tool, so we get all
  # download links and download until we find the one matching the system's arch and os
  release_asset_urls=$(curl -sL -u "_:$GITHUB_TOKEN" https://api.github.com/repos/cultureamp/hotel/releases/latest |
    grep '"url": ".*/releases/assets/.*"' |
    cut -d\" -f4)

  for url in $release_asset_urls; do
    # the only way to get a release's file name is to download it and write-out the filename
    downloaded_file=$(curl -sL "$url" \
      -u "_:$GITHUB_TOKEN" \
      --remote-header-name --remote-name \
      --write-out "%{filename_effective}" \
      --header "Accept: application/octet-stream")

    if [ "$downloaded_file" = "$hotel_tarball_name" ]; then
      tar -xzf "$downloaded_file"
      return
    else
      rm "$downloaded_file"
    fi
  done
}

install_hotel() {
  INITIAL_DIR="$PWD"
  TMPDIR=$(mktemp -d)
  download_latest_hotel
  mv hotel "$hotel_bin_path"
  cd "$INITIAL_DIR"
  rm -rf "$TMPDIR"
}

main() {
  validate_system_compatible
  get_and_store_github_key
  install_launcher
  install_hotel
}

main
